https://www.shellscript.sh/trap.html

http://redsymbol.net/articles/bash-exit-traps/

http://redsymbol.net/articles/bash-exit-traps/

https://www.learnshell.org/en/Bash_trap_command

https://www.putorius.net/using-trap-to-exit-bash-scripts-cleanly.html --> IMP

https://www.youtube.com/watch?v=tF0Qau7zcsw

https://spin.atomicobject.com/2017/08/24/start-stop-bash-background-process/ --> IMP

https://www.linuxjournal.com/content/bash-trap-command

TRAP example


#!/bin/bash

FILE="/tmp/file.log"

function delete_file() {
[ -f ${FILE} ] && rm -rf ${FILE} && echo "${FILE} deleted" || echo "file ${FILE} not present"
 }

trap delete_file EXIT

grap subham /etc/passwd

exit 1



==================================================

function egress {
     rm -f /tmp/output.txt
     systemctl start smb.service
     iptables -D INPUT -p tcp -s 10.0.0.222 --dport 32400 -j ACCEPT
}
# Call the egress function
trap egress EXIT

# Script contents
# Do some stuff
# Then some more stuff
# Do stuff to the stuff already done
# etc...

# When the script is completed or exits for any reason, the 
# commands in the egress function will be executed.
Conclusion

===================================================

#!/bin/bash
trap "iptables -D INPUT -p tcp -s 10.0.0.222 --dport 32400 -j ACCEPT" EXIT
echo "Opening ports for kiddos 2 hours of TV time"
iptables -I INPUT -p tcp -s 10.0.0.222 --dport 32400 -j ACCEPT
sleep 7200


=================================================================


function cleanup() {
    rm -rf "${BUILD_DIR}"
    rm -f "${LOCK_FILE}"
    # get rid of /tmp detritus, leaving anything accessed 2 days ago+
    find "${BUILD_DIR_BASE}"/* -type d -atime +1 | rm -rf
    echo "cleanup done"                                                                                                                          
} 
trap cleanup TERM INT QUIT


=======================================================

#!/bin/bash
# bash trap command
trap bashtrap INT
# bash clear screen command
clear;
# bash trap function is executed when CTRL-C is pressed:
# bash prints message => Executing bash trap subrutine !
bashtrap()
{
    echo "CTRL+C Detected !...executing bash trap !"
}
# for loop from 1/10 to 10/10
for a in `seq 1 10`; do
    echo "$a/10 to Exit." 
    sleep 1;
done
echo "Exit Bash Trap Example!!!" 


